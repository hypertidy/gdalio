## this code is sourced and displayed by knitr chunk read in the README.Rmd, and users can source it via
## source(system.file("raster_format/raster_format.codeR", package = "gdalio", mustWork = TRUE))

## ---- gdalio_im
## {spatstat.geom}
gdalio_im <- function(dsn, ...) {
  v <- gdalio_data(dsn, ...)
  g <- gdalio_get_default_grid()
  ## can we have a list of im?
  if (length(v) > 1) message("only returning one image layer im, for now")
  m <- matrix(v[[1]], g$dimension[1])
  spatstat.geom::im(t(m[,ncol(m):1]), xrange = g$extent[1:2], yrange = g$extent[3:4])
}
## ----

## ---- gdalio_raster
## {raster}
gdalio_raster <- function(dsn, ...) {
  v <- gdalio_data(dsn, ...)
  g <- gdalio_get_default_grid()
  r <- raster::raster(raster::extent(g$extent), nrows = g$dimension[2], ncols = g$dimension[1], crs = g$projection)
  if (length(v) > 1) {
    r <- raster::brick(replicate(length(v), r, simplify = FALSE))
  }
  raster::setValues(r, matrix(unlist(v), prod(g$dimension)))
}

## ---- gdalio_terra
## {terra}
gdalio_terra <- function(dsn, ...) {
  v <- gdalio_data(dsn, ...)
  g <- gdalio_get_default_grid()
  r <- terra::rast(terra::ext(g$extent), nrows = g$dimension[2], ncols = g$dimension[1], crs = g$projection)
  if (length(v) > 1) terra::nlyr(r) <- length(v)
  terra::setValues(r, matrix(unlist(v), prod(g$dimension)))
}
## ----

## ---- gdalio_stars
## {stars}
gdalio_stars <- function(dsn, ...) {
  v <- gdalio_data(dsn, ...)
  g <- gdalio_get_default_grid()
  aa <- array(unlist(v), c(g$dimension[1], g$dimension[2], length(v)))#[,g$dimension[2]:1, , drop = FALSE]
  if (length(v) == 1) aa <- aa[,,1, drop = TRUE]
  r <- stars::st_as_stars(sf::st_bbox(c(xmin = g$extent[1], ymin = g$extent[3], xmax = g$extent[2], ymax = g$extent[4])),
                          nx = g$dimension[1], ny = g$dimension[2], values = aa)

  r <- sf::st_set_crs(r, g$projection)
  r
}
## ----
